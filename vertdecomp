#!/usr/bin/env python3

import rospy 
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import numpy as np
from numpy import inf

global waypoints
global pose
global current_waypoint
global des_rot

global obs1 
global obs2
global obs3

global size1
global size2
global size3

global yaw1
global yaw2
global yaw3

global wall1
global wall2
global wall3

global boundary
global pathplan
pathplan = 1
current_waypoint=0

obs1 = [0.5, 1]
obs2 = [2.5, 0]
obs3 = [-2, -0.5]

size1 = [0.6,1,1]
size2 = [1,1,1]
size3 = [0.533,1,1]

yaw1 = -2.641
yaw2 = -0.3075
yaw3 = 0.5

wall1_start = [-5.853, 2.448]
wall1_end   = [3.873, 2.448]
wall2_start = [ 3.873, 2.486]
wall2_end = [6.107,-2.448]
wall3_start = [ 6.107,-2.448]
wall3_end  = [-3.619,-2.524]
wall4_start = [-3.619, -2.524]
wall4_end  =[-5.853,2.448]

wall1= [[-5.853, 2.448],[3.873, 2.448]]
wall2= [[ 3.873, 2.486],[6.107,-2.448]]
wall3= [[-3.619,-2.524],[ 6.107,-2.448]]
wall4= [[-5.853,2.448],[-3.619, -2.524]]


def goal_orient(x,y,theta,xg,yg):
    theta_d = np.arccos(((xg-x)*np.cos(theta)+ (yg-y)*np.sin(theta))/np.sqrt((xg-x)**2+(yg-y)**2))
    return theta_d


def fourcorners(obs, yaw, size):
    clearance = 0.2
    x = size[0] + clearance
    y = size[1]+ clearance
    R = ([np.cos(yaw) , -np.sin(yaw)],
         [np.sin(yaw) ,  np.cos(yaw)])

    corners = []
    corners.append(np.add(np.transpose(np.dot(R,(x/2,y/2))),obs))
    corners.append(np.add(np.transpose(np.dot(R,(-x/2,y/2))),obs))
    corners.append(np.add(np.transpose(np.dot(R,(-x/2,-y/2))),obs))
    corners.append(np.add(np.transpose(np.dot(R,(x/2,-y/2))),obs))

    edges = []

    edges.append(sorted(corners[0:2], key = lambda x: x[0]))
    edges.append(sorted(corners[1:3], key = lambda x: x[0]))
    edges.append(sorted(corners[2:], key = lambda x: x[0]))
    edges.append(sorted([corners[0],corners[3]], key = lambda x: x[0]))

    return edges, corners   


def colliding(pt1,pt2,edges):
  for edge in edges:
    [ed1,ed2] = edge
    den = (ed2[1]-ed1[1])*(pt2[0]-pt1[0]) - (ed2[0]-ed1[0])*(pt2[1]-pt1[1])
    
    if den != 0:
      u = (pt1[0]-ed1[0])*(pt1[1]- pt2[1])- (pt1[1]-ed1[1])*(pt1[0]- pt2[0])
      t = (pt1[0]-ed1[0])*(ed1[1]- ed2[1])- (pt1[1]-ed1[1])*(ed1[0]- ed2[0])

      u =u/den
      t=t/den
      
      if u<=1 and u>=0 and t<=1 and t>=0:
        return 1
    
    
  return 0


def intersect(x,edge):
    slope = (edge[1][1]-edge[0][1])/(edge[1][0]-edge[0][0])
    y = edge[0][1] + slope*(x-edge[0][0])
    return y










def sweepline(edges,corners,start,goal):
  #multidimesnional array
  #sort edges along x
  #edges = sorted(poly, key = lambda x: x[0])

  points = {}
  corners = sorted(corners, key=lambda x:x[0])

  #take the first corner and sort them along y
  current_edges = []
  remaining_edges = edges
  s=0
  pts = []

  for i in range(len(corners)):
    #determine all the edges of interesection

    x = corners[i][0]
    y = corners[i][1]

    intersecting_above = []
    intersecting_below = []

    for edge in remaining_edges:
      if x == edge[0][0] and y == edge[0][1] or x == edge[1][0] and y == edge[1][1]:
        current_edges.append(edge)
      elif x>= edge[0][0] and x<= edge[1][0]:
        z = intersect(x,edge)
        if z>y and z not in intersecting_above:
          intersecting_above.append(z)
        elif z<y and z not in intersecting_below:
          intersecting_below.append(z)
      # elif x > edge[1][0]:
        # remaining_edges= np.delete(remaining_edges,edge)

    n_up   = len(intersecting_above)
    n_down = len(intersecting_below)

    if n_up%2==1:
      #insert line above
      intersecting_above = sorted(intersecting_above)
      next_point_above = intersecting_above[0]
      mid_pt_above = [x,(next_point_above+y)/2]
      points[s] = mid_pt_above
      pts.append(mid_pt_above)
      s=s+1

    if n_down%2==1:
      #insert line below
      intersecting_below = sorted(intersecting_below)
      next_point_below = intersecting_below[-1]
      mid_pt_below = [x,(next_point_below+y)/2]
      points[s] = mid_pt_below
      pts.append(mid_pt_below)
      s=s+1
  
  pts= pts + [start] + [goal]
  points[s] = start
  points[s+1] = goal
  graph = generate_graph(points,pts,edges)

  return graph,pts





def dijkstra(a,pts):
    n = len(a)
    goal = n-1
    start = n-2
    spset = []
    parent = []
    dist = [10000 for j in range(n)]
    parent = [0 for j in range(n)]
    dist[start]= 0
    parent[start]=-1
    visited =[0 for j in range(n)]



    while(len(spset)!=n):
      dist_arg = np.argsort(dist)
      for j in range(len(dist_arg)):
        if visited[dist_arg[j]]==0:
          current_node = dist_arg[j]
          break
      spset.append(current_node)

      for j in range(n):
        if a[current_node][j]!=0 and visited[j]==0:
          distance = a[current_node][j]+dist[current_node]
          if distance<dist[j]:
            dist[j] = distance
            parent[j] = current_node


      
      visited[current_node]=1

    node = goal
    dis = 0
    par = parent[node]
    path = []
    path.append(node)

    while node!=start:
      par = parent[node]
      dis = dis + a[par][node]
      node = par
      path.append(node)

    way=[]
    for i in range(len(path)):
        way.append(pts[path[-i-1]])


    return way




def generate_graph(pt_dict,pts,edges):
  n = len(pts)
  graph = [[0 for i in range(n)]for j in range(n)]

  for key in pt_dict.keys():
    [x,y] = pt_dict[key]
    # dist_array = np.subtract(pts,sub_arr)
    # dist_array = np.absolute(dist_array)
    dist_array = []
    for j in range(n):
      dist_array.append(np.sqrt((x-pts[j][0])**2 + (y-pts[j][1])**2))

    # disp_arr = sorted(dist_array)
    # arguements = np.argsort(dist_array)
    for i in range(len(dist_array)):
      if dist_array[i]!=0:
        another_pt = pts[i]           

        if not colliding(pt_dict[key],another_pt,edges):
          graph[key][i] = dist_array[i] 
          graph[i][key] = dist_array[i]              #
          

  return graph


def waypoint_generator(x_start,y_start,x_goal,y_goal):
    #generating the graph
    global_corners = []
    world_edges = []

    [edges, corners] = fourcorners(obs1, yaw1, size1)
    global_corners.append(corners)
    world_edges.append(edges)

    [edges, corners] = fourcorners(obs2, yaw2, size2)
    global_corners.append(corners)
    world_edges.append(edges)

    [edges, corners] = fourcorners(obs3, yaw3, size3)
    global_corners.append(corners)
    world_edges.append(edges)


    world_corners = []

    for n in range(len(global_corners)):
      for j in range(4):
        world_corners.append(global_corners[n][j])

    world_corners = world_corners + wall1 + wall2 +wall3+wall4
    # world_corners = world_corners + [[-4,0]] + [[4,0]]


    global_edges= []
    for n in range(len(world_edges)):
      for j in range(4):
        global_edges.append(world_edges[n][j])

    global_edges = global_edges + [wall1] + [wall2] + [wall3] + [wall4]

    start = [x_start,y_start]
    goal = [x_goal,y_goal]
    [graph,pts] = sweepline(global_edges,world_corners,start,goal)
    waypoints = dijkstra(graph,pts)
    return waypoints




def odomdata_callback(msg):
    global pose
    global roll
    global pitch
    global yaw
    global file
    global pathplan
    global waypoints
    global current_waypoint

    x = msg.pose.pose.position.x
    y = msg.pose.pose.position.y
    z = msg.pose.pose.position.z

    q0 = msg.pose.pose.orientation.x
    q1 = msg.pose.pose.orientation.y
    q2 = msg.pose.pose.orientation.z
    q3 = msg.pose.pose.orientation.w

    pose = [x,y,z]
    # L = str(x) + " "+str(y)+ " " + str(z) + " "+ str(q0) + " "+str(q1)+ " " + str(q2) + " " + str(q3) +"\n"

    # file.write(L)
    [roll, pitch, yaw] = euler_from_quaternion ([q0,q1,q2,q3])

    
    x = pose[0]
    y = pose[1]

    if pathplan==1:
        waypoints = waypoint_generator(0,0,3,2)
        print(waypoints,'hello')
        pathplan = 0 


    xg = waypoints[current_waypoint][0]
    yg = waypoints[current_waypoint][1]

    err_att  = goal_orient(x,y,yaw, xg,yg)
    err_dist = np.sqrt((x-xg)**2+(y-yg)**2)


    if err_dist>0.1:
        if err_att < 0.1:
            move_the_bot.linear.x  = 0.1
            move_the_bot.angular.z = 0
        else:
            move_the_bot.linear.x  = 0
            move_the_bot.angular.z = -0.2*err_att

    else:
        if current_waypoint == len(waypoints)-1:
            move_the_bot.linear.x  = 0
            move_the_bot.angular.z = 0
            print('reached')

        else:
            current_waypoint = current_waypoint+1

            if err_att < 0.1:
                move_the_bot.linear.x  = 0.1
                move_the_bot.angular.z = 0
            else:
                move_the_bot.linear.x  = 0
                move_the_bot.angular.z = 0.1



    publish_to_cmd_vel.publish(move_the_bot) 



def laserdata_callback(msg):
    #Prints the length of ranges array, in our case there are total 360 readings, one reading for each 1 degree
    #print(len(msg.ranges)) 
    #To make use of laser data, we will need directional readings. For example, front, back, left and right of the robot. In our case, 0: Front, 180: Back, 90: Right, 270: Left,  are directions of laserbeam for robot
    #print(msg.ranges[0], msg.ranges[90], msg.ranges[180], msg.ranges[270])
    #Sample head collision avoidance algorithm(You will have to write your algorithm here)
    print('not used')





    







if __name__ == "__main__":

    rospy.init_node('turtlebot_controller_node')
    move_the_bot = Twist()
    # subscribe_to_laser = rospy.Subscriber('/tb3_1/scan', LaserScan, callback = laserdata_callback)
    # subscribe_to_odom = rospy.Subscriber('/tb3_1/odom', Odometry, callback = odomdata_callback)
    #subscribe_to_laser = rospy.Subscriber('/scan', LaserScan, callback = laserdata_callback)
    subscribe_to_odom = rospy.Subscriber('/odom', Odometry, callback = odomdata_callback)
    rospy.loginfo('My node has been started')
    # publish_to_cmd_vel = rospy.Publisher('/tb3_1/cmd_vel', Twist, queue_size = 10)
    publish_to_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)

    #create an object of Twist data

    
    rospy.spin()


